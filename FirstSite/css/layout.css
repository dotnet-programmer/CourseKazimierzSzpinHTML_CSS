.flex-container {
	height: 300px;
	background: #1760be;
	color: #ffffff;

	/* ustawienie nadające właściwość flex, musi to być w elemencie nadrzędnym */
	display: flex;

	/* rodzaj ułożenia elementów, czy mają być w pionie, poziomie, na odwrót w pionie itp, domyślnie jest row */
	flex-direction: column-reverse;
	flex-direction: row-reverse;
	flex-direction: column;
	flex-direction: row;

	/* ustawia zawijanie elementów jeśli nie mieszczą się na stronie */
	flex-wrap: wrap;

	/* 
		justify-content ustawia elementy względem głównej osi, dla flex-direction:row jest to oś pozioma, dla flex-direction:column jest to oś pionowa
		- flex-end - dla row - wyrównanie w poziomie do prawej strony
		- flex-end - dla column - wyrównanie w pionie na dole strony
		- space-around - każdy element wyświetla się z taka samą przestrzenią wokół
		- space-between - elementy wyświetlają się na całej powierzchni kontenera z równymi odstępami
		- space-evenly - wszystkie elementy odsunięte są od siebie o taka samą odległość
		- center - wszystkie elementy na środku bez odstepów między nimi
	*/
	justify-content: space-evenly;

	/* ustawianie elementów względem osi krzyżowej, czyli tej drugiej, prostopadłej do osi głównej w zależności od ustawienia row/column */
	align-items: baseline;
	align-items: center;

	/* ustawianie elementów względem osi krzyżowej, które zadziała gdy włączone jest zawijanie wierszy - wrap i jest więcej niż 1 linia elementów */
	align-content: space-around;

	/* odstęp między wierszami i kolumnami */
	row-gap: 1rem;
	column-gap: 2rem;
}

.flex-item {
	height: 60px;
	width: 120px;
	font-size: 2rem;
	background: #098824;

	/* ustawianie kolejności elementów, domyślnie jest wartość 0 */
	order: 0;

	/* ustawienie jak szybko ma rosnąć dany element, wszystkie elementy wypełniają całą dostępną przestrzeń */
	flex-grow: 1;

	/* ustawienie jak szybko mają maleć elementy */
	flex-shrink: 1;
}

.flex-item__first {
	height: 30px;
	order: -1;

	/* jeśli pozostałe elementy mają wartość 1, a ten ma 2, to znaczy że wypełniajac dostępne miejsce będzie 2x większy od pozostałych */
	flex-grow: 2;

	flex-shrink: 2;

	/* ustawienie wartości początkowej elementu */
	flex-basis: 10px;

	/* flex-flow przyjmuje 2 wartości: flex-direction i flex-wrap */
	flex-flow: row wrap;

	/* te 3 ustawienia można zapisać za pomocą 1 zapisu: grow - shrink - basis */
	flex: 2 2 100px;

	/* zmiana ustawienia align-items kontenera nadrzędnego tylko dla tego 1 elementu */
	align-self: flex-end;
}

.rectangle {
	width: 100%;
	height: 100vh;
	background: #444343;

	/* wyśrodkowanie elementu w kontenerze */
	display: flex;
	justify-content: center;
	align-items: center;
	/* !wyśrodkowanie elementu w kontenerze */
}

.circle {
	width: 100px;
	height: 100px;
	border-radius: 50%;
	background: #098824;
}

/* Menu */
.menu {
	margin: 0;
	padding: 0 2rem;
	background: #0aa312;
	color: #ffffff;
}

.menu__list {
	list-style: none;
	margin: 0;

	display: flex;
	flex-direction: column;
	align-items: center;
}

.menu__item {
	font-size: 2rem;
	padding: 1.5rem 1rem;
	cursor: pointer;
}

.menu__item:hover {
	color: #f8d302;
}

.menu__item--active {
	color: var(--color-primary);
}

@media screen and (min-width: 1200px) {
	.menu__list {
		flex-direction: row;
		justify-content: center;
		column-gap: 3rem;
	}
}

/* 
	Homework 1 - flexbox froggy:

	1: justify-content: flex-end;
	2: justify-content: center;
	3: justify-content: space-around;
	4: justify-content: space-between;
	5: align-items: flex-end;
	6: justify-content: center; 
		align-items: center;
	7: justify-content: space-around; 
		align-items: flex-end;
	8: flex-direction: row-reverse;
	9: flex-direction: column;
	10: flex-direction: row-reverse; 
		justify-content: flex-end;
	11: flex-direction: column; 
		justify-content: flex-end;
	12: flex-direction: column-reverse; 
		justify-content: space-between;
	13: flex-direction: row-reverse;
		justify-content: center;
		align-items: flex-end;
	14: order: 1;
	15: order: -1;
	16: align-self: flex-end;
	17: order: 1;
		align-self: flex-end;
	18: flex-wrap: wrap;
	19: flex-direction: column;
		flex-wrap: wrap;
	20: flex-flow: column wrap;
	21: align-content: flex-start;
	22: align-content: flex-end;
	23: flex-direction: column-reverse;
		align-content: center;
	24: flex-flow: column-reverse wrap-reverse;
		align-content: space-between;
		justify-content: center;
*/

/* grid - siatka */
.grid-container {
	display: grid;

	/* zdefiniowanie jak powinien wyglądać grid */
	/* ustawianie wielkości kolumn wartościami frakcji - czyli jak * w WPF, oznacza wartość o ile wieksze są odpowienie kolumny od ppozostałych */
	grid-template-columns: 2fr 1fr 1fr 1fr;
	/* jeśli każda frakcja ma taka samą wielkość, to można użyć zapisu repeat(ile-kolumn, rozmiar-kolumn): */
	grid-template-columns: repeat(5, 1fr);
	/* można też użyć zapisu minmax(minimalna-wielkość, maksymalna-wielkość) */
	grid-template-columns: 100px 40px 20px minmax(30px, 1fr);
	/* ustawianie wielkości kolumn wartościami liczbowymi */
	grid-template-columns: 100px auto 40px 120px;

	grid-template-rows: 100px auto 20px 100px 200px;

	row-gap: 10px;
	column-gap: 14px;
	gap: 10px 14px;

	height: 700px;

	/* ustawienia dla grida */
	justify-content: center;
	align-content: center;

	/* ustawienia dla elementów */
	justify-items: center;
	align-items: center;
}

.grid-item {
	background: #9e4808;
	color: #000000;
	font-size: 2rem;
}

.item-first {
	/* ustawienie elementu żeby zaczynał się od 1 krawędzi */
	grid-row-start: 1;
	/* ustawienie ile wierszy zajmuje ten element, czyli do której krawędzi sięga, jeżeli jest ustawione na 3, to zajmuje 2 rzędy */
	grid-row-end: 3;
	/* ten sam zapis w 1 linii */
	grid-row: 1 / 3;
	/* ten sam zapis z użyciem span */
	grid-row: 1 / span 2;

	grid-column-start: 1;
	grid-column-end: 3;
	grid-column: 1 / 3;

	justify-self: center;
	align-self: center;
}

.item-last {
	grid-row: 5 / span 2;
	grid-column: 3 / span 2;
	/* to samo w 1 linii: start-row start-column end-row wnd-column*/
	grid-area: 5 / 3 / span 2 / span 2;
}

/* gallery */
.gallery {
	display: grid;
	padding: 10px;
	max-width: 1140px;
	margin: 0 auto;
	gap: 1rem;
}

.gallery__img {
	max-width: 100%;
}

@media screen and (min-width: 768px) and (max-width: 1200px) {
	.gallery {
		grid-template-columns: repeat(2, 1fr);
		padding: 10px 30px;
	}
}

@media screen and (min-width: 1201px) {
	.gallery {
		grid-template-columns: repeat(4, 1fr);
	}
}

/* layout */
.wrapper {
	font-size: 1.5rem;
	min-height: 100vh;
	display: grid;
	gap: 5px;
	grid-template-columns: 1fr;
	grid-template-rows: 80px minmax(200px, auto) auto 40px;
	/* można połączyć te zapisy w grid-template: grid-template-rows / grid-template-columns */
	grid-template: 80px minmax(200px, auto) auto 40px / 1fr;

	/* nazwy obszarów w gridzie */
	grid-template-areas:
		"h"
		"c"
		"m"
		"f";
	max-width: 1140px;
	/* wyśrodkowanie */
	margin: 0 auto;
}

.header {
	/* przypisanie elementu do grid-template-areas */
	grid-area: h;
	background: #6087bb;
}

.content {
	grid-area: c;
	background: rgb(30, 255, 0);
}

.aside {
	grid-area: m;
	background: rgb(224, 73, 73);
}

.footer {
	grid-area: f;
	background: #cae725;
}

@media screen and (min-width: 768px) {
	.wrapper {
		grid-template-columns: repeat(12, 1fr);
		grid-template-rows: 80px minmax(200px, auto) 40px;
		grid-template-areas:
			"h h h h h h h h h h h h"
			"c c c c c c c c m m m m"
			"f f f f f f f f f f f f";
	}
}

/*
	Homework 2 - grid garden:

	1: grid-column-start: 3;
	2: grid-column-start: 5;
	3: grid-column-end: 4;
	4: grid-column-end: 2;
	5: grid-column-end: -2;
	6: grid-column-start: -3;
	7: grid-column-end: span 2;
	8: grid-column-end: span 5;
	9: grid-column-start: span 3;
	10: grid-column: 4 / 6;
	11: grid-column: 2 / span 3;
	12: grid-row-start: 3;
	13: grid-row: 3 / span 3;
	14: grid-column-start: 2;
		grid-row-start: 5;
	15: grid-row: 1 / span 5;
		grid-column: 2 / span 5;
	16: grid-area: 1 / 2 / span 3 / 6;
	17: grid-area: 2 / 3 / span 3 / span 3;
	18: order: 1;
	19: order: -1;
	20: grid-template-columns: 50%;
	21: grid-template-columns: repeat(8, 12.5%);
	22: grid-template-columns: 100px 3em 40%;
	23: grid-template-columns: 1fr 5fr;
	24: grid-template-columns: 50px 1fr 1fr 1fr 50px;
	25: grid-template-columns: 75px 3fr 2fr;
	26: grid-template-rows: 50px 0 0 0 1fr;
	27: grid-template: 60% 40% / 200px auto;
	28: grid-template: 1fr 50px / 1fr 4fr;
*/